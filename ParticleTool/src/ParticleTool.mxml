<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" frameRate="60" fontFamily="Microsoft Yahei" fontSize="11" 
					   xmlns:s="library://ns.adobe.com/flex/spark" title="{AppData.appTitle}"
					   xmlns:mx="library://ns.adobe.com/flex/mx" addedToStage="addedToStageHandler(event)"
					   showStatusBar="true" status="{AppParticleData.statusString}"
					   width="1600" height="800" backgroundAlpha="0" xmlns:view="view.*" xmlns:config="view.config.*" xmlns:countView="view.countView.*">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		mx|VScrollBar{
			chromeColor: #2d2d2d;
		}
		mx|HScrollBar{
			chromeColor: #2d2d2d;
		}
		mx|Button{
			chromeColor: #2d2d2d;
			color: #9f9f9f;
			textRollOverColor:#9f9f9f;
		}
		mx|ComboBox{
			chromeColor: #2d2d2d;
			color:#9f9f9f;
			alternatingItemColors:#505050;
		}
		mx|ToolTip{
			font-family:            verdana;
			font-size:              12px;
		}
	</fx:Style>
<fx:Script>
	<![CDATA[
		import flash.display3D.Context3D;
		
		import mx.controls.Alert;
		import mx.events.FlexNativeMenuEvent;
		import mx.formatters.DateFormatter;
		
		import PanV2.ConfigV2;
		
		import _Pan3D.light.LightVo;
		import _Pan3D.lineTri.LineTri3DSprite;
		import _Pan3D.particle.ctrl.ParticleManager;
		import _Pan3D.program.Program3DManager;
		import _Pan3D.role.MeshDataManager;
		import _Pan3D.scene.postprocess.PostProcessManager;
		import _Pan3D.texture.TextureManager;
		
		import _me.Scene_data;
		
		import air.update.ApplicationUpdaterUI;
		import air.update.events.UpdateEvent;
		
		import common.AppData;
		import common.GameUIInstance;
		
		import manager.LayerManager;
		import manager.MouseManager;
		
		import renderLevel.SceneLevel;
		
		import user.UserConfig;
		
		import view.AllAttributePanle;
		import view.ControlCenterView;
		import view.materials.MaterialParamView;
		import view.menu.MainProcess;
		import view.menu.MenuData;
		import view.scene.ScenePropView;
		
		import xyz.MoveScaleRotationLevel;

		private var context3D:Context3D;
		
		
		/** 设置初始化模式 */
		protected function addedToStageHandler(event:Event):void
		{
			
			Scene_data.mainScale=2;
			Scene_data.effectsLev = 2;
			stage.scaleMode = StageScaleMode.NO_SCALE;
			stage.align = StageAlign.TOP_LEFT; 
			initScene();
			checkForUpdate();
			
			//new FpsView(stage,0,20);
			
			
			Scene_data.isDevelop = true;
			
			Scene_data.sourceObj = true;
			
			Scene_data.light=new LightVo;
			Scene_data.light.Envscale = 1;
			
			
			// CurvesUI.getInstance().show(null);
			 
			 AppParticleData.showGrid = true;
			 
			//getDbInfoNew();
		}
		/** 初始化3d场景 */
		private function initScene():void{
			Scene_data.stage=this.stage;
			//Scene_data.fileRoot="assets/";
			
			//Config.init(stage, _config_end);
			LineTri3DSprite.thickNessScale=5
			ConfigV2.getInstance().init(stage, _config_end);
		}
		private var _sceneView:SceneLevel;
		/** 设置场景中各项模式 */		
		private function _config_end():void
		{
			Program3DManager.getInstance().initReg();
			
			this.context3D = Scene_data.context3D;
			MeshDataManager.getInstance().init(this.context3D);
			TextureManager.getInstance().init(this.context3D);
			PostProcessManager.getInstance().init(this.context3D);
			MoveScaleRotationLevel.getInstance().initContext3D(this.context3D,Scene_data.stage,1,true)
	
	
			
			_sceneView=new SceneLevel;
			_sceneView.initData();
			
			ParticleManager.getInstance();
			
			startRender();
			
	
			stage.addEventListener(Event.RESIZE,onStageResize);
			onStageResize()
			
			init();
	
			
		}
		private function startRender():void{
			this.addEventListener(Event.ENTER_FRAME,renderScene);
		}
		/** 主渲染 */
		private function renderScene(event:Event=null):void{
			_sceneView.upData();
		}
		
		/** 场景大小改变 场景视口改变 */
		private function onStageResize(event:Event=null):void{
			if(stage.stageWidth == 0 || stage.stageHeight == 0){
				return;
			}
			Scene_data.stageWidth = stage.stageWidth;
			Scene_data.stageHeight = stage.stageHeight;
			
			
			Scene_data.stage3DVO.width=Scene_data.stageWidth ;
			Scene_data.stage3DVO.height=Scene_data.stageHeight ;
			
			
			Scene_data.cam3D.fovw=Scene_data.stageWidth;
			Scene_data.cam3D.fovh=Scene_data.stageHeight;
			_sceneView.stageResize();
			math2Ddata();
			
			LayerManager.getInstance().changeSize();
			
			PostProcessManager.getInstance().resize(stage.stageWidth,stage.stageHeight);
			
		}
		
		public function math2Ddata():void
		{
			Scene_data.sw2D=1000*Scene_data.mainScale/Scene_data.stageWidth
			Scene_data.tx2D=-Scene_data.stageWidth/Scene_data.mainScale;
			Scene_data.sinAngle2D=Math.sin(Math.abs(Scene_data.focus3D.angle_x)*Math.PI/180);
			Scene_data.ty2D=Scene_data.stageHeight/Scene_data.mainScale/Scene_data.sinAngle2D;
		}
		
		private function roll():void{
			AppParticleData.particle3DFacet.rotationXYZangle(0,0,0);
			AppParticleData.particle3DFacet.rotationNum++;
			AppParticleData.particle3DFacet.rotationByAxis();
		}
		/**
		 * 初始化面板信息
		 * */
		private function init():void{
			
			initView();
			
	
			
			
			
			_mainProcess = new MainProcess;
			
			_mainProcess.setApp(this);
			
			//multi();
			
			scenePropView.readObj();
			
		}
				
		private function initView():void{
			GameUIInstance.stage = this.stage;
			GameUIInstance.uiContainer = rootUI;
			GameUIInstance.layoutBottom = layoutBottom;
			GameUIInstance.layoutTop = layoutTop;
			GameUIInstance.application = this;
			
			LayerManager.getInstance().testNodeTree();
			
			MouseManager.initMouse();
			
			//allAttributePanle.top = 50;
			//allAttributePanle.bottom = 0;
			//this.addChild(allAttributePanle);
			
			
			//centerCav.addChild(ControlCenterView.getInstance());
			
			var center:ControlCenterView = ControlCenterView.getInstance();
			center.init(null,"控制",1);
			LayerManager.getInstance().addPanel(center);
			
			scenePropView = new ScenePropView(); 
			scenePropView.init(null,"场景参数",2);
			LayerManager.getInstance().addPanel(scenePropView);
			
			//scenePropView.readObj();
			
			var materialParamview:MaterialParamView = MaterialParamView.getInstance();
			materialParamview.init(null,"材质参数",2);
			LayerManager.getInstance().addPanel(materialParamview);
			
			var allAttributePanle:AllAttributePanle = AllAttributePanle.getInstance();
			allAttributePanle.init(null,"粒子属性",4);
			LayerManager.getInstance().addPanel(allAttributePanle);
			
			
		}
		
		/** 检查程序版本更新 */
		private var appUpdater:ApplicationUpdaterUI = new ApplicationUpdaterUI();
		private function checkForUpdate():void {   
			appUpdater.updateURL = "http://192.168.88.25/codeas/ParticleTool/output/update.xml";   
			appUpdater.isCheckForUpdateVisible = false;
			appUpdater.addEventListener(UpdateEvent.INITIALIZED, onUpdate);  
			appUpdater.addEventListener(ErrorEvent.ERROR, onError);  
			appUpdater.initialize();   
		}
		private function onError(event:ErrorEvent):void {   
			Alert.show(event.toString());   
		}   
		private function onUpdate(event:UpdateEvent):void {   
			appUpdater.checkNow();  
		}
		
		
		/**
		 * 获取授权文件
		**/
		private function getAuthorize():void{
			var file:File = new File(File.documentsDirectory.url + "/ParticleAuthorizeNew.txt");
			if(file.exists){
				AppParticleData.isAuthorize = true;
			}else{
				AppParticleData.isAuthorize = false;
			}
		}
		/**
		 * 获取数据库配置文件
		 **/
		private function getDbInfo():void{
			var file:File = new File(File.documentsDirectory.url + "/ParticleAuthorize.txt");
			if(file.exists){
				var fs:FileStream = new FileStream;
				fs.open(file,FileMode.READ);
				var str:String = fs.readUTFBytes(fs.bytesAvailable);
				fs.close();
				
				var ary:Array = str.split("\n");
				new UserConfig(ary[0],ary[1]);
			}else{
				new UserConfig("","");
			}
		}
		
		private function getDbInfoNew():void{
			var file:File = new File(File.documentsDirectory.url + "/ParticleAuthorizeNew.txt");
			if(file.exists){
				var fs:FileStream = new FileStream;
				fs.open(file,FileMode.READ);
				var str:Object = fs.readObject();
				fs.close();
				
				var ary:Array = str as Array;
				if(ary.length){
					new UserConfig(ary[0].user,ary[0].psd);
				}
				
				var xml:XML = MenuData.myMenuData;
				
				var nextXML:XML = <menuitem label="账号列表"></menuitem>;
				for(var i:int=0;i<ary.length;i++){
					var itemXmlStr:String = "<menuitem label='" + ary[i].user + "' action='" +(20 + i) + "'/>";
					var itemXML:XML = XML(itemXmlStr);
					nextXML.appendChild(itemXML);
				}
				
				xml.menuitem[3] = nextXML;
				
				AppParticleData.userList = ary;
				
			}else{
				new UserConfig("","");
			}
		}
		
		
//		public function refresh():void{
//			ControlCenterView.getInstance().pause();
//		}
		
		private var oldid:String;
		private var reg:RegExp = /<id>.*<\/id>/;
		
		protected function multi():void
		{
			var df:DateFormatter = new DateFormatter();
			df.formatString = "YYYYMMDDHHNNSS";
			var time:String = df.format(new Date());
			var newid:String = "<id>ParticleToolNew"+time+"</id>";
			
			var f:File =new File(File.applicationDirectory.resolvePath(
				"META-INF/AIR/application.xml").nativePath);
			if(!f.exists){
				return;
			}
			var fs:FileStream = new FileStream();  
			fs.open(f,FileMode.READ);      
			var str:String = new String(fs.readUTFBytes(fs.bytesAvailable));
			oldid = str.match(reg).toString();
			str = str.replace(reg,newid);  
			fs.open(f,FileMode.WRITE);
			fs.writeUTFBytes(str); 
			fs.close();
			
			if(oldid == "<id>ParticleToolNew</id>")
			{
				this.addEventListener(Event.CLOSE,returnId);
			}
		}
		
		protected function returnId(e:Event):void
		{
			var f:File =new File(File.applicationDirectory.resolvePath(
				"META-INF/AIR/application.xml").nativePath);
			var fs:FileStream = new FileStream();  
			fs.open(f,FileMode.READ);      
			var str:String = new String(fs.readUTFBytes(fs.bytesAvailable));
			str = str.replace(reg,oldid);  
			fs.open(f,FileMode.WRITE);
			fs.writeUTFBytes(str);
			fs.close();
		}
		private var _mainProcess:MainProcess;

		private var scenePropView:ScenePropView;
		protected function itemClickHandler(event:FlexNativeMenuEvent):void
		{
			_mainProcess.processEvent(event);
		}
		
	]]>
</fx:Script>
	<!--<view:ParticleAttributePanle x="0" top="50" bottom="0" visible="false"/>-->
	<!--<view:AllAttributePanle id="attributePanle" x="0" top="50" bottom="0"/>-->
<!--	<mx:Canvas id="centerCav" width="1006" height="208" y="50" left="308" right="10">
		<view:ControlCenterView/>
	</mx:Canvas>-->
	
	<mx:UIComponent id="axisUI"/>
	<!--<view:FileToolBar width="100%" id="filetoolBar" visible="false"/>-->
	<!--<mx:Canvas right="0" bottom="40" width="280" height="38">
		<mx:CheckBox id="attVis" x="10" y="10" label="显示属性" color="#FFFFFF" enabled="true"
					 selected="true"/>
		<mx:CheckBox id="timelineVis" x="95" y="10" label="显示时间轴" color="#FFFFFF" enabled="true"
					 selected="true"/>
		<mx:CheckBox id="showGrid" x="186" y="10" label="显示网格" color="#FFFFFF" enabled="true" click="showGrid_clickHandler(event)"
					 selected="true"/>
	</mx:Canvas>-->
	<!--<countView:CountPanle right="0" bottom="0"/>-->
	<!--<config:ConfigPanle right="10" bottom="80" id="cfg" visible="false"/>-->
	<!--<mx:UIComponent id="ui"/>-->
	
	<mx:Canvas width="100%" height="100%" id="rootUI" horizontalScrollPolicy="off" verticalScrollPolicy="off" />
	
	<mx:Canvas width="100%" height="100%">
		<mx:UIComponent id="layoutBottom" visible="false"/>
		<mx:UIComponent id="layoutTop"/>
	</mx:Canvas>
	
	<!--<mx:menu>
		<mx:FlexNativeMenu dataProvider="{MenuData.myMenuData}"  itemClick="itemClickHandler(event)"
						   labelField="@label" 
						   showRoot="false"/>
	</mx:menu>-->
	
</s:WindowedApplication>
